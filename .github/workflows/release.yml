name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  # ───────────────────────────────────────────────────────────────────────────
  # 1. Create the Release (runs once per tag)
  # ───────────────────────────────────────────────────────────────────────────
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        id: create
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:     ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft:        false
          prerelease:   false

  # ───────────────────────────────────────────────────────────────────────────
  # 2. Build & Publish (matrix)
  # ───────────────────────────────────────────────────────────────────────────
  build-and-publish:
    name: Build & Publish Release
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"

    steps:
      # 1. PREPARE SOURCE
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. SET UP TOOLCHAIN
      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # 3. BUILD BINARY
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      # 4. PREPARE DISTRIBUTABLE
      - name: Create distribution folder
        run: mkdir -p dist

      - name: Copy and rename binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cp \
            target/${{ matrix.target }}/release/favis${{ matrix.ext }} \
            dist/favis-${{ matrix.target }}${{ matrix.ext }}

      - name: Copy and rename binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Copy-Item -Path "target\${{ matrix.target }}\release\favis${{ matrix.ext }}" `
                    -Destination "dist\favis-${{ matrix.target }}${{ matrix.ext }}"

      # 5. GENERATE CHECKSUM
      - name: Generate SHA256 checksum (Linux)
        if: runner.os == 'Linux'
        working-directory: dist
        run: sha256sum favis-${{ matrix.target }}${{ matrix.ext }} > favis-${{ matrix.target }}${{ matrix.ext }}.sha256

      - name: Generate SHA256 checksum (macOS)
        if: runner.os == 'macOS'
        working-directory: dist
        run: shasum -a 256 favis-${{ matrix.target }}${{ matrix.ext }} > favis-${{ matrix.target }}${{ matrix.ext }}.sha256

      - name: Generate SHA256 checksum (Windows)
        if: runner.os == 'Windows'
        working-directory: dist
        shell: pwsh
        run: |
          $file = "favis-${{ matrix.target }}${{ matrix.ext }}"
          $hash = (Get-FileHash -Algorithm SHA256 $file).Hash.ToLower()
          "$hash *$file" | Out-File -Encoding utf8 "$file.sha256"

      # 6. UPLOAD ASSETS
      - name: Upload binary asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url:        ${{ needs.create_release.outputs.upload_url }}
          asset_path:        dist/favis-${{ matrix.target }}${{ matrix.ext }}
          asset_name:        favis-${{ matrix.target }}${{ matrix.ext }}
          asset_content_type: application/octet-stream

      - name: Upload checksum asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url:        ${{ needs.create_release.outputs.upload_url }}
          asset_path:        dist/favis-${{ matrix.target }}${{ matrix.ext }}.sha256
          asset_name:        favis-${{ matrix.target }}${{ matrix.ext }}.sha256
          asset_content_type: text/plain
